---
layout: post
title:  "RFM (Recency, Frequency, Monetary) customer scoring segmentation - Customer value analysis"
date:   2022-06-13 19:15:41 +0530
categories: Python
---
RFM table generation, top customer scoring, customer value analysis

<img src="https://raw.githubusercontent.com/JanCinis/jancinis.github.io/main/assets/img_post_02/rfm_metrics_img.png" height="250">

**Introduction**  
Customer value analysis (CVA) is an analytic method for discovering customers’ characteristics and on this basis making further analysis to extract useful knowledge from big data.

RFM models help us to understand how much is the client worth to the company. This is known as customer scoring. Based on such information, we are able to determine the efficiency of marketing campaigns and decide whether a customer is important enough for us to maintain advertising spendings.

The main advantage of RFM analysis is that it provides meaningful information about customers while using fewer (three-dimensional) criterions as cluster attributes. This reduces the complexity of customer value analysis model without compromising its accuracy.

**Data**  
For current project used online retail dataset from <a href="http://archive.ics.uci.edu/ml/datasets/online+retail" target="_blank">UCI Machine Learning Repository</a>. The libraries used pandas and datetime. The data and full code are available in the <a href="www.google.com" target="_blank">repository</a>

**I. Identifying inconsistencies**  

// 1. Step – Check whether users are more likely to convert on weekends compared with weekdays.

• Add day of week column

**I. Create a Recency Frequency Monetary table**  
• count of unique countries
```python
df = pd.read_excel("online_retail.xlsx")
print(df.Country.nunique())
```
• countries with the largest number of consumers
```python
customer_country=df[['Country','CustomerID']].drop_duplicates()
print(customer_country.groupby(['Country'])['CustomerID'].agg('count').reset_index().sort_values('CustomerID', ascending=False))
```
• limit analysis UK only
```python
df_UK = df.loc[df['Country'] == 'United Kingdom']
```
• get rid of null values for CustomerID
```python
print(df_UK.isnull().sum(axis=0))
df_UK = df_UK[pd.notnull(df['CustomerID'])]
```
• minimum values in UnitPrice and Quantity columns
```python
price_min = df_UK.UnitPrice.min()
quantity_min = df_UK.Quantity.min()
```
• get rid of negative values in Quantity column
```python
df_UK = df_UK[(df_UK['Quantity']>0)]
quantity_min = df_UK.Quantity.min()
print(quantity_min)
```
• unique values for each column of df_UK
```python
def unique_counts(df_UK):
   for column in df_UK.columns:
       count = df_UK[column].nunique()
       print(column, ": ", count)
```

• total price calculation
```python
df_UK['TotalPrice'] = df_UK['Quantity'] * df_UK['UnitPrice']
```
• first and last order date in the data
```python
FD = df_UK['InvoiceDate'].dt.date.min() # 2010-12-01
LD = df_UK['InvoiceDate'].dt.date.max() # 2011-12-09
```
• recency calculation
```python
calc_time = LD + dt.timedelta(days=1)
df_UK['InvoiceDate'] = pd.to_datetime(df_UK['InvoiceDate'])
```
• RFM table
```python
rfm_tab = df_UK.groupby('CustomerID').agg({'InvoiceDate': lambda x: (calc_time - x.dt.date.max()).days, # Recency
                                        'InvoiceNo': lambda x: len(x),      # Frequency
                                        'TotalPrice': lambda x: x.sum()}) # Monetary Value

rfm_tab['InvoiceDate'] = rfm_tab['InvoiceDate'].astype(int)
rfm_tab.rename(columns={'InvoiceDate': 'Recency', 
                        'InvoiceNo': 'Frequency', 
                        'TotalPrice': 'Monetary_value'}, inplace=True)
```
• RFM metrics for each customer
```python
print(rfm_tab.head())
```
• Interpretation:
- CustomerID has such frequency, monetary value and recency that many days

**II. Find the best customers**  
• Split metrics into segments by using quartile (4 segments)
```python
cust_quantiles = rfm_tab.quantile(q=[0.25,0.5,0.75])
cust_quantiles = cust_quantiles.to_dict()
print(cust_quantiles)
```
• Segmented RFM table
```python
segmented_rfm = rfm_tab
```
• Functions to categorize customers, 111 is the best score
```python
def RS_score(x,p,d):
    if x <= d[p][0.25]:
        return 1
    elif x <= d[p][0.50]:
        return 2
    elif x <= d[p][0.75]: 
        return 3
    else:
        return 4
    
def FM_score(x,p,d):
    if x <= d[p][0.25]:
        return 4
    elif x <= d[p][0.50]:
        return 3
    elif x <= d[p][0.75]: 
        return 2
    else:
        return 1
```
• Function results and sort out by adding a new column to combine RFM score
```python
segmented_rfm['r_quartile'] = segmented_rfm['Recency'].apply(RS_score, args=('Recency',cust_quantiles,))
segmented_rfm['f_quartile'] = segmented_rfm['Frequency'].apply(FM_score, args=('Frequency',cust_quantiles,))
segmented_rfm['m_quartile'] = segmented_rfm['Monetary_value'].apply(FM_score, args=('Monetary_value',cust_quantiles,))

segmented_rfm['RFM_score'] = segmented_rfm.r_quartile.map(str) \
                            + segmented_rfm.f_quartile.map(str) \
                            + segmented_rfm.m_quartile.map(str)
```
• top 10 customers by score
```python
top_10_customers = segmented_rfm[segmented_rfm['RFM_score']=='111'].sort_values('Monetary_value', ascending=False).reset_index()
print(top_10_customers.head(10))
```
• top 10 customers only by Monetary_value (TotalPrice)
```python
cust_UK_total = df_UK.groupby('CustomerID')['TotalPrice'].sum()
print(cust_UK_total.sort_values(ascending=False).head(10))
```

**Conclusion:**  
– conclusion text
